using System;
using FluentAssertions;
using NUnit.Framework;

namespace CloudAwesome.MarkdownMaker.Tests
{
    [TestFixture]
    public class MdCommentTests
    {
        /// <summary>
        /// Given an MdComment with multiple lines of text
        /// Then then Markdown should return valid markdown
        /// And each like of text should be on it's own line
        ///     with the comment delimiters on their own line
        ///
        /// e.g. a two line comment should take up four lines
        /// </summary>
        [Test]
        public void Multiline_Comment_Returns_Valid_Markdown()
        {
            var expectedOutput = 
                $"<!-- {Environment.NewLine}" + 
                $"This is a comment {Environment.NewLine}" +
                $"On two lines {Environment.NewLine}" +
                $"-->";

            var comment = new MdComment()
                .AddLine("This is a comment")
                .AddLine(new MdPlainText("On two lines"));

            comment.Markdown.Should().Be(expectedOutput);
        }

        /// <summary>
        /// Given an MdComment with a single line of text
        /// Then the Markdown should return valid markdown
        /// And the whole comment should be only a single line
        ///     including the comment delimiters
        /// </summary>
        [Test]
        public void Single_line_Comment_Returns_Valid_Markdown()
        {
            var expectedOutput =
                "<!-- This awesome file was auto-generated by an awesome file auto-generator -->";

            var text = new MdPlainText("This awesome file was auto-generated by an awesome file auto-generator");
            var comment = new MdComment(text);

            comment.Markdown.Should().Be(expectedOutput);
        }
        
        /// <summary>
        /// Given an MdComment with no input text
        /// Then the Markdown should return a valid empty comment markdown
        ///
        /// (This is in contrast to most other Md elements which require input text)
        /// </summary>
        [Test]
        public void An_Empty_Comment_Is_Still_Valid_Markdown()
        {
            var expectedOutput = "<!-- -->";

            var comment = new MdComment();

            comment.Markdown.Should().Be(expectedOutput);
        }
        
        /// <summary>
        /// Given an comment with a single line of text
        /// Then it can be created by passing the string into the MdComment constructor
        /// And the Markdown returns valid markdown
        /// </summary>
        [Test]
        public void Single_Line_Comment_Can_Be_Created_With_String_And_Return_Valid_Markdown()
        {
            var expectedOutput =
                "<!-- This awesome file was auto-generated by an awesome file auto-generator -->";
            
            var comment = new MdComment("This awesome file was auto-generated by an awesome file auto-generator");

            comment.Markdown.Should().Be(expectedOutput);
        }
    }
}